// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3824.AlphaBot2018.subsystems;

import org.usfirst.frc3824.AlphaBot2018.Robot;
import org.usfirst.frc3824.AlphaBot2018.RobotMap;
import org.usfirst.frc3824.AlphaBot2018.commands.*;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.Joystick;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.PWMVictorSPX;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class drivetrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController speedR1 = RobotMap.drivetrainSpeedR1;
    private final SpeedController speedR2 = RobotMap.drivetrainSpeedR2;
    private final SpeedControllerGroup rightDrive = RobotMap.drivetrainRightDrive;
    private final SpeedController speedL1 = RobotMap.drivetrainSpeedL1;
    private final SpeedController speedL2 = RobotMap.drivetrainSpeedL2;
    private final SpeedControllerGroup leftDrive = RobotMap.drivetrainLeftDrive;
    private final DifferentialDrive drive = RobotMap.drivetrainDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        setDefaultCommand(new JoystickDrive());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    		//System.out.println("drivetrain periodic");
    		}

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

	/**
	 * Method to control the drive through the specified joystick
	 */
	public void driveWithJoystick(Joystick stick)
	{
		// Square twist to decrease sensitivity
		double twist = stick.getTwist() * (-0.75);
		
		// Determine if the twist is negative to allow restoring the sign
		if (twist < 0)
		{
			// Remember to preserve direction, it is lost when squaring
			twist = -1.0 * (twist * twist);
		} 
		else
		{
			twist = twist * twist;
		}

		// Square forward/backward to decrease sensitivity
		double moveValue = stick.getY();
		if (moveValue < 0)
		{
			// Remember to preserve direction, it is lost when squaring
			moveValue = -1.0 * (moveValue * moveValue);
		} 
		else
		{
			moveValue = moveValue * moveValue;
		}

		// Drive with arcade control
		drive.arcadeDrive(moveValue, twist);
	}

}

